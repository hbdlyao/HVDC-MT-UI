///////////////////////////////////////////////////////////
//  CRwDbf.cs
//  Implementation of the Class CRwDbf
//  Generated by Enterprise Architect
//  Created on:      10-5ÔÂ-2017 9:23:45
//  Original author: open2
///////////////////////////////////////////////////////////

using Yao.BaseFrame.Device;
using Yao.BaseFrame.DevTBL;

namespace Yao.BaseFrame.dataRw
{
    public class CDataRwDev
    {
        protected CDataRw RwAdo;

        protected string dbfName;
        protected string tblName;
        protected int tblType;
        protected int devType;

        protected string SqlStr="";
        protected string SqlParam = "";


        public void InitAdo(CDataRw vAdo)
        {
            RwAdo = vAdo;
        }

        /// 
        /// <param name="vtblName"></param>
        /// <param name="vtblType"></param>
        /// <param name="vDevType"></param>
        public void InitTable(string vtblName, int vtblType, int vDevType)
        {
            tblName = vtblName;
            tblType = vtblType;
            devType = vDevType;
        }

        protected CDevGrid pGrid;

        /// 
        /// <param name="vHvdc"></param>
        public void InitGrid(CDevGrid vHvdc)
        {
            pGrid = vHvdc;
        }

        public virtual void OnLoad()
        {
            CDevTBL vTBL;
            CDevBase vDev;

            string vSQL;

            vSQL = "select * from " + tblName;
            RwAdo.OpenTBL(vSQL, tblName);

            //if (vOk)
            {
                //cout << "Load---" << tblName << "---" << endl;

                vTBL = pGrid.DeviceTBL(tblType);
                for (int i = 0; i < RwAdo.RowCount; i++)
                {
                    RwAdo.Record_Read(i);
                    //
                    vDev = (CDevBase)(vTBL.NewDevice(devType));

                    doLoad(vDev);

                    vTBL.DeviceAdd(vDev);

                    //                    
                    //RwAdo.Record_MoveNext();

                    //cout << "   --" << vDev.GetDeviceName() << endl;

                }//for

            }//if

            RwAdo.CloseTBL();

        }

        public virtual void OnSave()
        {
            CDevTBL vTBL;
            string vSQL;

            vSQL = "select * from " + tblName;
            RwAdo.OpenTBL(vSQL, tblName);

            //
            RwAdo.ClearRow();

            //if (vOk)
            {
                //cout << "Load---" << tblName << "---" << endl;
                vTBL = pGrid.DeviceTBL(tblType);
                foreach (CDevBase vDev in vTBL.Children())
                {
                    RwAdo.Record_AddNew();

                    doSave(vDev);

                    //cout << "   --" << vDev.GetDeviceName() << endl;

                }//while

            }//if

            RwAdo.TBL_Update();
            //
            RwAdo.CloseTBL();

        }
        protected string StaField(int vStaCount, int vIndex)
        {
            string vStr;

            switch (vStaCount)
            {
                case 1:
                    vStr = "StationName";
                    break;

                default:
                    vStr = "StationName" + vIndex.ToString();
                    break;

            }

            return vStr;
        }

        protected string NodeNameField(int vStaCount, int vIndex)
        {
            string vStr;

            switch (vStaCount)
            {
                case 1:
                    vStr = "NodeName";
                    break;

                default:
                    vStr = "NodeName" + vIndex.ToString();
                    break;

            }

            return vStr;
        }
        /// 
        /// <param name="vDevice"></param>
        protected virtual void doLoad(CDevBase vDevice)
        {
            int i;
            string vFieldName;

            for (i = 1; i <= vDevice.StaCount; i++)
            {
                vFieldName = StaField(vDevice.StaCount, i);

                vDevice.StationNames[i - 1] = RwAdo.ReadString(vFieldName);
            }

            for (i = 1; i <= vDevice.dotCount; i++)
            {
                vFieldName = NodeNameField(vDevice.dotCount, i);

                vDevice.NodeNames[i - 1] = RwAdo.ReadString(vFieldName);
            }

            //
            vDevice.ID = RwAdo.ReadInt32("ID");

            vDevice.DeviceID = RwAdo.ReadString("DeviceID");
            vDevice.DeviceName = RwAdo.ReadString("DeviceName");
            vDevice.DeviceType = RwAdo.ReadInt32("DeviceType");

        }

        /// 
        /// <param name="vDevice"></param>
        protected virtual void doSave(CDevBase vDevice)
        {
            int i;
            string vFieldName;

            for (i = 1; i <= vDevice.StaCount; i++)
            {
                vFieldName = StaField(vDevice.StaCount, i);

                RwAdo.SaveField(vFieldName, vDevice.StationNames[i - 1]);
            }

            for (i = 1; i <= vDevice.dotCount; i++)
            {
                vFieldName = NodeNameField(vDevice.dotCount, i);

                RwAdo.SaveField(vFieldName, vDevice.NodeNames[i - 1]);
            }


            RwAdo.SaveField("ID", vDevice.ID);

            RwAdo.SaveField("DeviceID", vDevice.DeviceID);
            RwAdo.SaveField("DeviceName", vDevice.DeviceName);
            RwAdo.SaveField("DeviceType", vDevice.DeviceType);

        }



    }//end CDataRwTBL

}//end namespace RwBase