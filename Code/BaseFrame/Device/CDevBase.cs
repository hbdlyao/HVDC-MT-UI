///////////////////////////////////////////////////////////
//  CDevBase.cs
//  Implementation of the Class CDevBase
//  Generated by Enterprise Architect
//  Created on:      09-5月-2017 11:26:10
//  Original author: open2
///////////////////////////////////////////////////////////


using System;

namespace Yao.BaseFrame.Device
{
    public class CDevBase : CBasicVo , IDisposable
    {
        protected string f_DeviceID;
        protected string f_DeviceName;
        protected int    f_DeviceType;

        protected int    f_StaCount;
        protected string[] f_StationNames;

        protected int    f_dotCount;
        private string[] f_NodeNames;
        private int[]    f_NodeIDs;

        public CDevBase()
        {
            StaCount = 1;
            dotCount = 0;
        }
        /// <summary>
        /// 所在组合的名称
        /// </summary>
        public string ParentDeviceName { get; set; }

        public int PosOrNeg        { get; set; }


        public string DeviceID
        {
            get
            {
                return f_DeviceID;
            }
            set
            {
                f_DeviceID = value;
            }
        }

        public string DeviceName
        {
            get
            {
                return f_DeviceName;
            }
            set
            {
                f_DeviceName = value;
            }
        }

        public int DeviceType
        {
            get
            {
                return f_DeviceType;
            }
            set
            {
                f_DeviceType = value;
            }
        }

        public int dotCount
        {
            get
            {
                return f_dotCount;
            }
            set
            {
                f_dotCount = value;

                f_NodeNames = new string[f_dotCount];
                f_NodeIDs = new int[f_dotCount];

            }
        }

        public int StaCount
        {
            get
            {
                return f_StaCount;
            }
            set
            {
                f_StaCount = value;

                f_StationNames = new string[f_StaCount];               

            }
        }
        public string[] StationNames
        {
            get
            {
                return f_StationNames;
            }
           
        }

        public string[] NodeNames
        {
            get
            {
                return f_NodeNames;
            }

        }
        public int[] NodeIDs
        {
            get
            {
                return f_NodeIDs;
            }           
        }

        public virtual bool IsLeaf()
        {
            return true;
        }

        public virtual void Init()
        {

        }

        /// 
        /// <param name="vItem"></param>
        public virtual void Add(CDevBase vItem)
        {

        }

        /// 
        /// <param name="vItem"></param>
        public virtual void Remove(CDevBase vItem)
        {

        }

        #region IDisposable Support
        private bool disposedValue = false; // 要检测冗余调用

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: 释放托管状态(托管对象)。
                }

                // TODO: 释放未托管的资源(未托管的对象)并在以下内容中替代终结器。
                // TODO: 将大型字段设置为 null。

                disposedValue = true;
            }
        }

        // TODO: 仅当以上 Dispose(bool disposing) 拥有用于释放未托管资源的代码时才替代终结器。
        // ~CDevBase() {
        //   // 请勿更改此代码。将清理代码放入以上 Dispose(bool disposing) 中。
        //   Dispose(false);
        // }

        // 添加此代码以正确实现可处置模式。
        public void Dispose()
        {
            // 请勿更改此代码。将清理代码放入以上 Dispose(bool disposing) 中。
            Dispose(true);
            // TODO: 如果在以上内容中替代了终结器，则取消注释以下行。
             GC.SuppressFinalize(this);
        }
        #endregion

    }//end CDevBase

}//end namespace vo