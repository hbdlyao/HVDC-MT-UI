///////////////////////////////////////////////////////////
//  CDataRw.cs
//  Implementation of the Class CDataRw
//  Generated by Enterprise Architect
//  Created on:      10-5ÔÂ-2017 9:23:22
//  Original author: open2
///////////////////////////////////////////////////////////


using System;
using System.Data;
using System.Data.OleDb;

namespace Yao.BaseFrame.dataRw
{
    /// <summary>
    /// AdoÊý¾Ý¿â
    /// </summary>
    public class CDataRw
    {
        protected OleDbConnection pConnection;
        protected OleDbDataAdapter daAdapter;

        //
        public  DataSet daSet;

        public DataTable daTBL;
        public DataRowCollection daRows;

        protected DataRow daRow;
        protected DataColumn daColumn;
        protected DataRelation daRelation;

        //
        protected string strConnect = "strConnect";

        protected string dbfName = "";

        protected string UserID = "";
        protected string Password = "";

        public int RowCount
        {
            get
            {
                return daRows.Count;
            }
        }

        public CDataRw(DataSet vSet)
        {
            daSet = vSet;
            //
        }

        /// <summary>
        /// StrTable dbfTable;
        /// </summary>
        /// <param name="vDbf"></param>
        /// <param name="vUserID"></param>
        /// <param name="vPassword"></param>
        /// <param name="vSecurity"></param>
        public virtual void InitDbf(string vDbf, string vUserID, string vPassword, string vSecurity)
        {
            //
        }
    

        public bool IsEOF()
        {
            return false;

        }

        public bool IsOpen()
        {

            bool vOk;

            vOk = (pConnection.State == ConnectionState.Open);

            return vOk;

        }

        public OleDbConnection OpenDBF()
        {
            pConnection = new OleDbConnection(strConnect);

            pConnection.Open();

            return pConnection;            

        }


        public void CloseDBF()
        {
            pConnection.Close();
        }

        /// 
        /// <param name="vSQL"></param>
        public DataTable OpenTBL(string vSQL, string vTBL)
        {
            daAdapter = new OleDbDataAdapter(vSQL, pConnection);
            daAdapter.Fill(daSet,vTBL);

            daTBL = daSet.Tables[vTBL];

            daRows = daTBL.Rows;

            return daTBL;

        }

        public void CloseTBL()
        {
           //pRecordset.Close();
        }

        public void ClearRow()
        {
            //daRows.Clear();

            for (int i = 0; i < RowCount; i++)
            {
                daRows[i].Delete();
            }

        }       

        public void Record_AddNew()
        {
            daRow=daTBL.Rows.Add();
        }

        public DataRow Record_Read(int vIndex)
        {
            daRow = daTBL.Rows[vIndex];          

            return daRow;
         
        }

        public void Record_Update()
        {
           //daRow.AcceptChanges();                    
        }

        public void TBL_Update(DataTable vdaTBL)
        {
            OleDbCommandBuilder sb1 = new OleDbCommandBuilder(daAdapter);
          
            //
            daAdapter.Update(vdaTBL);

            vdaTBL.AcceptChanges();

        }

        public void TBL_Update()
        {
            OleDbCommandBuilder sb1 = new OleDbCommandBuilder(daAdapter);
            
            DataRow[] vRows;
            // First process deletes.
            vRows = daTBL.Select(null, null, DataViewRowState.Deleted);
            daAdapter.Update(vRows);

            // Next process updates.
            vRows = daTBL.Select(null, null, DataViewRowState.ModifiedCurrent);
            daAdapter.Update(vRows);

            // Finally, process inserts.
            vRows = daTBL.Select(null, null, DataViewRowState.Added);
            daAdapter.Update(vRows);
            

            //daAdapter.Update(daTBL);

            daTBL.AcceptChanges();

        }
        public int ReadInt16(string vField)
        {
            return CDataFieldFunc.ReadInt16(daRow, vField);
        }

        public int ReadInt32(string vField)
        {
            return CDataFieldFunc.ReadInt32(daRow,vField);
        }
        public double ReadDouble(string vField)
        {
            return CDataFieldFunc.ReadDouble(daRow, vField);
        }

        public string ReadString(string vField)
        {
            return CDataFieldFunc.ReadString(daRow, vField);
        }

        public bool ReadBool(string vField)
        {
            return CDataFieldFunc.ReadBool(daRow, vField);
        }

        public void SaveField(string vField,int vValue)
        {
            CDataFieldFunc.SaveField(daRow, vField, vValue);
        }

        public void SaveField(string vField, double vValue)
        {
            CDataFieldFunc.SaveField(daRow, vField, vValue);
        }

        public void SaveField(string vField, string vValue)
        {
            CDataFieldFunc.SaveField(daRow, vField, vValue);
        }

        public void SaveField(string vField, bool vValue)
        {
            CDataFieldFunc.SaveField(daRow, vField, vValue);
        }


    }//end CDataRw

}//end namespace RwBase