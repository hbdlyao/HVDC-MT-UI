///////////////////////////////////////////////////////////
//  CDevStation.cs
//  Implementation of the Class CDevStation
//  Generated by Enterprise Architect
//  Created on:      21-5ÔÂ-2017 6:48:20
//  Original author: open2
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using Yao.BaseFrame.Device;


namespace Yao.BaseFrame.DevTBL
{
    public class CDevStation
    {
        public string StationName;

        protected Dictionary<int, CDevTBL> pTables;
        public List<CDevTBL> pChildren;

        public CDevStation()
        {
            pChildren = new List<CDevTBL>();
            pTables = new Dictionary<int, CDevTBL>();

            Init();        
        }

        ~CDevStation()
        {
            
            pChildren.Clear();
            pTables.Clear();

        }
        /// 
        /// <param name="vType"></param>
        public virtual string TypeToName(int vType)
        {

            return "TypeToName";
        }

        public virtual void Init()
        {

        }

        public virtual void Clear()
        {
            foreach (CDevTBL vTBL in pChildren)
            {
                vTBL.Clear();
            }

        }

        /// 
        /// <param name="vItem"></param>
        public virtual void Add(CDevTBL vItem)
        {

            pChildren.Add(vItem);
        }

        /// 
        /// <param name="vItem"></param>
        public virtual void Remove(CDevTBL vItem)
        {
            pChildren.Remove(vItem);
        }

        /// 
        /// <param name="vIndex"></param>
        public CDevTBL Child(int vIndex)
        {

            return pChildren[vIndex];
        }

        public List<CDevTBL> Children()
        {

            return pChildren;
        }

        public int ChildCount()
        {

            return pChildren.Count;
        }

        /// 
        /// <param name="vType"></param>
        public virtual CDevTBL NewDevTBL(int vType)
        {

            return null;
        }

        /// 
        /// <param name="vType"></param>
        public virtual CDevBase NewDevice(int vType)
        {

            return DeviceTBL(vType).NewDevice(vType);
        }

        /// 
        /// <param name="vType"></param>
        public CDevTBL DeviceTBL(int vType)
        {

            return pTables[vType];
        }

        /// 
        /// <param name="vType"></param>
        /// <param name="vDeviceName"></param>
        public CDevBase Device(int vType, string vDeviceName)
        {

            return DeviceTBL(vType).Device(vDeviceName);
        }

        /// 
        /// <param name="vType"></param>
        /// <param name="vIndex"></param>
        public CDevBase Device(int vType, int vIndex)
        {

            return DeviceTBL(vType).Device(vIndex);
        }

        /// 
        /// <param name="vType"></param>
        /// <param name="vItem"></param>
        public virtual void DeviceAdd(int vType, CDevBase vItem)
        {
            DeviceTBL(vType).DeviceAdd(vItem);
        }

        /// 
        /// <param name="vType"></param>
        /// <param name="vItem"></param>
        public virtual void DeviceRemove(int vType, CDevBase vItem)
        {

            DeviceTBL(vType).DeviceRemove(vItem);
        }

        /// 
        /// <param name="vType"></param>
        /// <param name="vStaName"></param>
        /// <param name="vDevName"></param>
        public CDevBase Device(int vType, string vStaName, string vDevName)
        {

            CDevTBL vTBL;

            vTBL = DeviceTBL(vType);
            foreach (CDevBase vDev in vTBL.Children())
            {
                if (vDev.StationNames[0].Equals(vStaName) && vDev.DeviceName.Equals(vDevName))
                    return vDev;
            }

            return null;
        }

    }//end CDevStation

}//end namespace DevTBL