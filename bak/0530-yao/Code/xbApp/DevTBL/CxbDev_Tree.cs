///////////////////////////////////////////////////////////
//  CxbDev_Tree.cs
//  Implementation of the Class CxbDev_Tree
//  Generated by Enterprise Architect
//  Created on:      09-5ÔÂ-2017 17:08:09
//  Original author: open2
///////////////////////////////////////////////////////////


using Hvdc.MT.xb.Def;
using Hvdc.MT.xb.Func;
using System.Collections.Generic;
using Yao.BaseFrame.Device;
using Yao.BaseFrame.Func;

namespace Hvdc.MT.xb.Device
{
    public class CxbDev_Tree : CxbDevBase
    {
        /// <summary>
        /// protected pObjVector pChildren;
        /// </summary>
        public List<CDevBase> pChildren;
        //public string tableName;

        public CxbDev_Tree()
        {
            pChildren = new List<CDevBase>();
        }

        /// 
        /// <param name="vType"></param>
        public virtual string TypeToName(int vType)
        {
            return CxbFunc.xbTypeToName(vType);
        }

        public int ChildCount()
        {
            return pChildren.Count;
        }

        public List<CDevBase> Children()
        {
            return pChildren;
        }

        /// 
        /// <param name="vIndex"></param>
        public Yao.BaseFrame.Device.CDevBase Child(int vIndex)
        {
            return pChildren[vIndex];
        }

        public override bool IsLeaf()
        {
            return false;
        }

        /// 
        /// <param name="vItem"></param>
        public override void Add(CDevBase vItem)
        {
            pChildren.Add(vItem);
        }

        /// 
        /// <param name="vItem"></param>
        public override void Remove(CDevBase vItem)
        {
            pChildren.Remove(vItem);
        }


        public virtual CDevBase NewChild(int vDevType)
        {
            string vID, vName;
            CDevBase vDev;

             vDev = doNewChild(vDevType);

            vID = CMyFunc.CreateObjID();
            vName = TypeToName(vDevType) + (ChildCount()) + "_" + vID;

            vID = "vID";
            vName = "vName";

            vDev.DeviceID = vID;
            vDev.DeviceName = vName;
            vDev.DeviceType = vDevType;

            vDev.Init();

            return vDev;
        }
        /// 
        /// <param name="vDevType"></param>
        protected virtual CDevBase doNewChild(int vDevType)
        {
            return xbNewChild(vDevType);
        }

        /// 
        /// <param name="vDevType"></param>
        public static CDevBase xbNewChild(int vDevType)
        {

            CDevBase vDev;

            switch (vDevType)
            {
                case CxbDef.xb_3pVSrc:
                    vDev = new CxbDev3pVSrc();
                    break;

                case CxbDef.xb_PbDKQ:
                    vDev = new CxbDevPbDkq();
                    break;

                case CxbDef.xb_DCF:
                    vDev = new CxbDevDCF();
                    break;

                case CxbDef.xb_DCF_RLC:
                    vDev = new CxbDevDCF_RLC();
                    break;

                case CxbDef.xb_DCLine:
                    vDev = new CxbDevDcLine();
                    break;

                case CxbDef.xb_GroundLine:
                    vDev = new CxbDevGroundLine();
                    break;

                case CxbDef.xb_DcLine_Seg:
                    vDev = new CxbDevDcLine_Seg();
                    break;

                case CxbDef.xb_GroundLine_Seg:
                    vDev = new CxbDevGroundLine_Seg();
                    break;

                case CxbDef.xb_Ground:
                    vDev = new CxbDevGround();
                    break;

                //case CxbDef.xb_MetalLine:
                //vDev = new CxbDevMetalLine();
                //break;

                case CxbDef.xb_XfC:
                    vDev = new CxbDevXf_C();
                    break;

                case CxbDef.xb_CoupleC:
                    vDev = new CxbDevCouple_C();
                    break;

                case CxbDef.xb_PulseC:
                    vDev = new CxbDevPulse_C();
                    break;

                case CxbDef.xb_Shunt:
                    vDev = new CxbDevShunt();
                    break;

                case CxbDef.xb_Branch:
                    vDev = new CxbDevBranch();
                    break;

                case CxbDef.xb_Trap:
                    vDev = new CxbDevTrap();
                    break;

                case CxbDef.xb_Monitor:
                    vDev = new CxbDevMonitor();
                    break;

                default:
                    vDev = new CxbDevBase();
                    break;

            }//switch

            vDev.Init();

            return vDev;
        }

    }//end CxbDev_Tree

}//end namespace xbDev