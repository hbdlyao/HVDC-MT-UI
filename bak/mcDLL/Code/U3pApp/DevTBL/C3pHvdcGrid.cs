///////////////////////////////////////////////////////////
//  C3pHvdcGrid.cs
//  Implementation of the Class C3pHvdcGrid
//  Generated by Enterprise Architect
//  Created on:      09-5月-2017 17:08:09
//  Original author: open2
///////////////////////////////////////////////////////////


using Yao.BaseFrame.DevTBL;

using Hvdc.MT.U3p.Def;
using Hvdc.MT.U3p.Func;
using System.Collections.Generic;
using Hvdc.MT.mc.DevTBL;
using Hvdc.MT.mc.Def;
using Hvdc.MT.U3p.Device;

namespace Hvdc.MT.U3p.DevTBL
{
    public class C3pHvdcGrid : CDevGrid
    {
        public override void Init()
        {
            int i1, i2;

            i1 = C3pDefs.U3p_AcSys;
            i2 = C3pDefs.U3p_Ground;

            for (int i = i1; i <= i2; i++)
                NewDevTBL(i);
        }

        /// <summary>
        /// @param ="vType"
        /// </summary>
        /// <param name="vDevType"></param>
        public override string TypeToName(int vDevType)
        {

            return C3pFunc.TypeToName(vDevType);
        }

        /// 
        /// <param name="vType"></param>
        public override CDevTBL NewDevTBL(int vType)
        {

            string vName;
            CDevTBL vTBL;

            vName = TypeToName(vType);

            //
            vTBL = new C3pDevTBL();

            vTBL.tblName = vName;
            vTBL.tblType = vType;

            //
            Add(vTBL);

            //
            pTables[vType] = vTBL;

            return vTBL;
        }

        protected override CDevStation doNewStation()
        {

            return new C3pDevStation();
        }

        public void NewGrid(IList<string> vStations)
        {
            //刘畅

            foreach (string vStr in vStations)
            {
                doNewAcSys(vStr);

                doNewXf2(vStr);

                doNewConvertor(vStr);

            }

            //

            AddToStation();

        }

        protected void doNewAcSys(string vStaName)
        {
            C3pDevTBL vTBL = DeviceTBL(C3pDefs.U3p_AcSys) as C3pDevTBL;

            C3pDevAcSys vDev;

            vDev = vTBL.NewDevice(C3pDefs.U3p_AcSys) as C3pDevAcSys;

            vDev.Init();
            vDev.DeviceID   = "U3p交流系统";
            vDev.DeviceName = "U3p交流系统";
            vDev.DeviceType = C3pDefs.U3p_AcSys;
            vDev.StationNames[0] = vStaName;
            vDev.PosOrNeg = 0;

            vTBL.DeviceAdd(vDev);

        }

        protected void doNewXf2(string vStaName)
        {
            C3pDevTBL vTBL = DeviceTBL(C3pDefs.U3p_Xf2) as C3pDevTBL;

            C3pDevXf2 vDev;

            for (int i = 0; i < 4 ; i++)
            {
                vDev = vTBL.NewDevice(C3pDefs.U3p_Xf2) as C3pDevXf2;

                vDev.Init();
                vDev.DeviceID   = "U3p换流变_" + (i + 1).ToString();
                vDev.DeviceName = "U3p换流变_" + (i + 1).ToString();
                vDev.DeviceType = C3pDefs.U3p_Xf2;
                vDev.StationNames[0] = vStaName;
                vDev.PosOrNeg = i+1;

                vTBL.DeviceAdd(vDev);
            }


        }

        protected void doNewConvertor(string vStaName)
        {
            C3pDevTBL vTBL = DeviceTBL(C3pDefs.U3p_Convertor) as C3pDevTBL;

            C3pDevConvertor vDev;

            for (int i = 0; i < 4 ; i++)
            {
                vDev = vTBL.NewDevice(C3pDefs.U3p_Convertor) as C3pDevConvertor;

                vDev.Init();
                vDev.DeviceID = "U3p换流器_" + (i + 1).ToString();
                vDev.DeviceName = "U3p换流器_" + (i + 1).ToString();
                vDev.DeviceType = C3pDefs.U3p_Convertor;
                vDev.StationNames[0] = vStaName;
                vDev.PosOrNeg = i + 1;

                vTBL.DeviceAdd(vDev);
            }

        }

    }//end C3pHvdcGrid

}//end namespace DevTBL