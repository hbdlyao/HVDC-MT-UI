///////////////////////////////////////////////////////////
//  CDevTBL.cs
//  Implementation of the Class CDevTBL
//  Generated by Enterprise Architect
//  Created on:      09-5ÔÂ-2017 17:08:07
//  Original author: open2
///////////////////////////////////////////////////////////

using Yao.BaseFrame.Func;

using Yao.BaseFrame.Device;
using System.Data;
using System.Collections.Generic;

namespace Yao.BaseFrame.DevTBL
{
    public class CDevTBL
    {
        public List<CDevBase> pChildren;
        public string tblName { get; set; }
        public int tblType { get; set; }


        public CDevTBL()
        {
            pChildren = new List<CDevBase>();
        }

        /// 
        /// <param name="vType"></param>
        public virtual string TypeToName(int vType)
        {

            return "TypeToName";
        }

        public virtual void Clear()
        {
            pChildren.Clear();
        }

        public int ChildCount()
        {

            return pChildren.Count;
        }

        public List<CDevBase> Children()
        {
            return pChildren;
        }

        /// 
        /// <param name="vIndex"></param>
        public CDevBase Child(int vIndex)
        {
            return pChildren[vIndex];
        }

        /// 
        /// <param name="vItem"></param>
        public virtual void Add(CDevBase vItem)
        {
            pChildren.Add(vItem);
        }

        public virtual void Remove(CDevBase vItem)
        {
            pChildren.Remove(vItem);
        }
        /// 
        /// <param name="vDevType"></param>
        public virtual CDevBase NewDevice(int vDevType)
        {
            string vID, vName;
            CDevBase vDev;

            vID = CMyFunc.CreateObjID();
            vName = TypeToName(vDevType) + (ChildCount()) + "_" + vID;

            vID = "vID";
            vName = "vName";

            vDev = NewDevice(vDevType, vID, vName);

            return vDev;
        }

        /// 
        /// <param name="vDevType"></param>
        /// <param name="vID"></param>
        public virtual CDevBase NewDevice(int vDevType, string vID)
        {

            CDevBase vDev;

            vDev = NewDevice(vDevType, vID, vID);

            return vDev;
        }

        /// 
        /// <param name="vDevType"></param>
        /// <param name="vID"></param>
        /// <param name="vName"></param>
        public virtual CDevBase NewDevice(int vDevType, string vID, string vName)
        {

            CDevBase vDev;

            vDev = doNewDevice(vDevType);

            vDev.DeviceID = vID;
            vDev.DeviceName = vName;
            vDev.DeviceType = vDevType;

            vDev.Init();

            return vDev;
        }
        /// 
        /// <param name="vDevType"></param>
        protected virtual CDevBase doNewDevice(int vDevType)
        {
            return null;
        }

        public CDevBase Device(string vDevName)
        {
            CDevBase vDevice = null;

            foreach (CDevBase vDev in pChildren)
            {
                if (vDev.DeviceName.Equals(vDevName))
                {
                    vDevice = vDev;

                    break;
                }
            }

            return vDevice;

        }

        public CDevBase Device(int vIndex)
        {
            return Child(vIndex);
        }

        public virtual void DeviceAdd(CDevBase vItem)
        {
            Add(vItem);
        }

        public virtual void DeviceRemove(CDevBase vItem)
        {
            Remove(vItem);
        }




    }//end CDevTBL

}//end namespace DevTBL