///////////////////////////////////////////////////////////
//  CxbRwGroundLine.cs
//  Implementation of the Class CxbRwGroundLine
//  Generated by Enterprise Architect
//  Created on:      09-5ÔÂ-2017 8:08:06
//  Original author: open2
///////////////////////////////////////////////////////////

using Hvdc.MT.xb.Device;
using Yao.BaseFrame.Device;
using Yao.BaseFrame.DevTBL;
using Yao.BaseFrame.Func;

namespace Hvdc.MT.xb.Rw
{
    public class CxbRwGroundLine : CxbRw_Tree
    {
      
        protected override void doLoad_Leaf_Data(CxbDevBase vLeaf)
        {
            CxbDevGroundLine_Seg vDev;

            vDev = (CxbDevGroundLine_Seg)(vLeaf);

            base.doLoad_Leaf_Data(vDev);


            vDev.LineModel.WireCount = RwAdo.ReadInt16("WireCount");
            vDev.LineModel.Leng = RwAdo.ReadDouble("Leng");

            vDev.LineModel.Hspace[0] = RwAdo.ReadDouble("Hspace0");
            vDev.LineModel.Hspace[1] = RwAdo.ReadDouble("Hspace1");
            vDev.LineModel.Hspace[2] = RwAdo.ReadDouble("Hspace2");

            vDev.LineModel.Height[0] = RwAdo.ReadDouble("Height0");
            vDev.LineModel.Height[1] = RwAdo.ReadDouble("Height1");
            vDev.LineModel.Height[2] = RwAdo.ReadDouble("Height2");

            vDev.LineModel.Sag[0] = RwAdo.ReadDouble("Sag0");
            vDev.LineModel.Sag[1] = RwAdo.ReadDouble("Sag1");
            vDev.LineModel.Sag[2] = RwAdo.ReadDouble("Sag2");

            vDev.LineModel.L_CondRadius = RwAdo.ReadDouble("L_CondRadius");
            vDev.LineModel.L_CondType   = RwAdo.ReadInt16("L_CondType");
            vDev.LineModel.L_CondValue  = RwAdo.ReadDouble("L_CondValue");

            vDev.LineModel.G_CondRadius = RwAdo.ReadDouble("G_CondRadius");
            vDev.LineModel.G_CondType   = RwAdo.ReadInt16("G_CondType");
            vDev.LineModel.G_CondValue  = RwAdo.ReadDouble("G_CondValue");

            vDev.LineModel.L_SplitAmount = RwAdo.ReadInt16("L_SplitAmount");
            vDev.LineModel.G_SplitAmount = RwAdo.ReadInt16("G_SplitAmount");

            vDev.LineModel.L_BundleSpace = RwAdo.ReadDouble("L_BundleSpace");
            vDev.LineModel.G_BundleSpace = RwAdo.ReadDouble("G_BundleSpace");

            vDev.LineModel.SoilRe = RwAdo.ReadDouble("SoilRe");

        }

        protected override void doSave_Leaf_Data(CxbDevBase vLeaf)
        {
            CxbDevGroundLine_Seg vDev;

            vDev = (CxbDevGroundLine_Seg)(vLeaf);

            base.doSave_Leaf_Data(vDev);

            
            SqlStr = SqlStr + ", ";
            SqlParam = SqlParam + " , ";

            SqlStr = SqlStr + "WireCount, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.WireCount) + " , ";

            SqlStr = SqlStr + "Leng, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Leng) + " , ";

            SqlStr = SqlStr + "Hspace0, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Hspace[0]) + " , ";

            SqlStr = SqlStr + "Hspace1, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Hspace[1]) + " , ";

            SqlStr = SqlStr + "Hspace2, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Hspace[2]) + " , ";

            SqlStr = SqlStr + "Height0, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Height[0]) + " , ";

            SqlStr = SqlStr + "Height1, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Height[1]) + " , ";

            SqlStr = SqlStr + "Height2, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Height[2]) + " , ";

            SqlStr = SqlStr + "Sag0, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Sag[0]) + " , ";

            SqlStr = SqlStr + "Sag1, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Sag[1]) + " , ";

            SqlStr = SqlStr + "Sag2, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.Sag[2]) + " , ";

            SqlStr = SqlStr + "L_CondRadius, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.L_CondRadius) + " , ";

            SqlStr = SqlStr + "L_CondType, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.L_CondType) + " , ";

            SqlStr = SqlStr + "L_CondValue, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.L_CondValue) + " , ";

            SqlStr = SqlStr + "G_CondRadius, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.G_CondRadius) + " , ";

            SqlStr = SqlStr + "G_CondType, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.G_CondType) + " , ";

            SqlStr = SqlStr + "G_CondValue, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.G_CondValue) + " , ";

            SqlStr = SqlStr + "L_SplitAmount, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.L_SplitAmount) + " , ";

            SqlStr = SqlStr + "G_SplitAmount, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.G_SplitAmount) + " , ";

            SqlStr = SqlStr + "L_BundleSpace, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.L_BundleSpace) + " , ";

            SqlStr = SqlStr + "G_BundleSpace, ";
            SqlParam = SqlParam + GetString(vDev.LineModel.G_BundleSpace) + " , ";

            SqlStr = SqlStr + "SoilRe ";
            SqlParam = SqlParam + GetString(vDev.LineModel.SoilRe);

        }

    }//end CxbRwGroundLine

}//end namespace xb